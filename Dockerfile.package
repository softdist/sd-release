FROM denoland/deno:2.0.0 AS builder-run
RUN mkdir -p /build/lib /app /tar /etc/certs
# Set working directory inside the container
WORKDIR /build
ARG certs=/etc/certs
ENV DENO_CERT=/etc/certs/trusted_certs.pem
# Copy the necessary files into the container
COPY . .
WORKDIR /app/aarch64-apple-darwin
WORKDIR /app/x86_64-apple-darwin
WORKDIR /app/aarch64-unknown-linux-gnu
WORKDIR /app/x86_64-unknown-linux-gnu
WORKDIR /app/x86_64-pc-windows-msvc

WORKDIR /build

RUN --mount=type=secret,id=TRUSTED_CERT,env=TRUSTED_CERT \
    echo "$TRUSTED_CERT" > $certs/trusted_certs.pem

RUN deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target aarch64-apple-darwin --no-check  --output /app/aarch64-apple-darwin/sd-run src/sd-run.ts && \
    deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target aarch64-apple-darwin --output /app/aarch64-apple-darwin/sd-install src/sd-install.ts && \
    deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target aarch64-apple-darwin --output /app/aarch64-apple-darwin/sd-extricate src/sd-extricate.ts

RUN deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target x86_64-apple-darwin --no-check --output /app/x86_64-apple-darwin/sd-run src/sd-run.ts && \
    deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target x86_64-apple-darwin --output /app/x86_64-apple-darwin/sd-install src/sd-install.ts && \
    deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target x86_64-apple-darwin --output /app/x86_64-apple-darwin/sd-extricate src/sd-extricate.ts

 RUN deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target aarch64-unknown-linux-gnu --no-check  --output /app/aarch64-unknown-linux-gnu/sd-run src/sd-run.ts && \
     deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target aarch64-unknown-linux-gnu --output /app/aarch64-unknown-linux-gnu/sd-install src/sd-install.ts && \
     deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target aarch64-unknown-linux-gnu --output /app/aarch64-unknown-linux-gnu/sd-extricate src/sd-extricate.ts

 RUN deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target x86_64-unknown-linux-gnu --no-check --output /app/x86_64-unknown-linux-gnu/sd-run src/sd-run.ts && \
     deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target x86_64-unknown-linux-gnu --output /app/x86_64-unknown-linux-gnu/sd-install src/sd-install.ts && \
     deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target x86_64-unknown-linux-gnu --output /app/x86_64-unknown-linux-gnu/sd-extricate src/sd-extricate.ts

 RUN deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target x86_64-pc-windows-msvc --no-check --output /app/x86_64-pc-windows-msvc/sd-run src/sd-run.ts && \
     deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target x86_64-pc-windows-msvc --output /app/x86_64-pc-windows-msvc/sd-install src/sd-install.ts && \
     deno compile --allow-read --allow-write --allow-net --allow-run --allow-env --allow-sys --target x86_64-pc-windows-msvc --output /app/x86_64-pc-windows-msvc/sd-extricate src/sd-extricate.ts

RUN chmod -R 0660 /app
WORKDIR /app
RUN tar -cvf ../release.tar .

# ---------
# Lightweight binary image
FROM gcr.io/distroless/base-debian12
WORKDIR /app

COPY .semver.version.tag .
COPY .semver.commit.tag .
COPY --from=builder-run /release.tar /app/release.tar

ENTRYPOINT [ "sh" ]
