name: Build and Release Deno Binaries

on:
  push:
    tags:
      - 'v*'  # Runs only when a version tag is pushed

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux-amd64
            fname: ''
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            suffix: linux-arm64
            fname: ''
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: darwin-amd64
            fname: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: darwin-arm64
            fname: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: windows-amd64
            fname: .exe
        # Disable Windows ARM for now

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Install Deno
        uses: denoland/setup-deno@v2.0.2
        with:
          deno-version: v2.x

      - name: Compile Deno Binaries
        run: |
          deno compile --allow-all --no-check --target=${{ matrix.target }} --output sd-run-${{ matrix.suffix }}${{ matrix.fname }} ./src/sd-run.ts
          deno compile --allow-all --target=${{ matrix.target }} --output sd-install-${{ matrix.suffix }}${{ matrix.fname }} ./src/sd-install.ts
          deno compile --allow-all --target=${{ matrix.target }} --output sd-extricate-${{ matrix.suffix }}${{ matrix.fname }} ./src/sd-extricate.ts

      - name: Generate Checksums
        run: |
          shasum -a 256 sd-run-${{ matrix.suffix }}${{ matrix.fname }} > sd-run-${{ matrix.suffix }}${{ matrix.fname }}.sha256
          shasum -a 256 sd-install-${{ matrix.suffix }}${{ matrix.fname }} > sd-install-${{ matrix.suffix }}${{ matrix.fname }}.sha256
          shasum -a 256 sd-extricate-${{ matrix.suffix }}${{ matrix.fname }} > sd-extricate-${{ matrix.suffix }}${{ matrix.fname }}.sha256

      - name: Upload Binaries and Checksums as Artifacts
        uses: actions/upload-artifact@v4.6.1
        with:
          name: deno-binaries-${{ matrix.suffix }}
          path: |
            sd-run-${{ matrix.suffix }}*
            sd-install-${{ matrix.suffix }}*
            sd-extricate-${{ matrix.suffix }}*

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Download All Compiled Binaries
        uses: actions/download-artifact@v4.1.9

      - name: Set Executable Permissions (Linux/Mac)
        if: runner.os != 'Windows'
        run: chmod +x deno-binaries-*/sd-*

      - name: Read Release Notes
        id: read_release_notes
        run: |
          if [ -f release-notes.md ]; then
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            cat release-notes.md >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "No release-notes.md found, using default notes."
            echo "RELEASE_NOTES=Release for ${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Upload Binaries and Checksums to `softdist/docker.client`
        env:
          GH_TOKEN: ${{ secrets.TARGET_REPO_TOKEN }}
        run: |
          RELEASE_TAG="${GITHUB_REF#refs/tags/}"  # Correct extraction of tag name
          TARGET_REPO="softdist/docker.client"

          # Check if release exists
          RELEASE_ID=$(gh api repos/$TARGET_REPO/releases --jq "map(select(.tag_name == \"$RELEASE_TAG\")) | .[0].id")

          if [ -z "$RELEASE_ID" ]; then
            echo "Creating a new release with release-notes.md..."
            RESPONSE=$(gh api repos/$TARGET_REPO/releases \
              -X POST \
              -F tag_name="$RELEASE_TAG" \
              -F name="$RELEASE_TAG" \
              -F body="$RELEASE_NOTES" \
              -F draft=false \
              -F prerelease=false)
            RELEASE_ID=$(echo "$RESPONSE" | jq .id)
          fi

          # Upload each binary and its checksum to the release without collision
          for artifact in deno-binaries-*; do
            for file in "$artifact"/*; do
              gh release upload "$RELEASE_TAG" "$file" --repo "$TARGET_REPO" --clobber
            done
          done
